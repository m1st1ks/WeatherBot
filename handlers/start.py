from mysql.connector import connect, Error
from aiogram import types, Dispatcher

from create import bot
from config import host, user, password, db_name


async def menu(cb: types.CallbackQuery):
    await cb.answer()
    markup = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', callback_data='weather now')
    button2 = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='weather full_day 0')
    button3 = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data='weather week')
    markup.add(button1, button2, button3)
    await cb.message.edit_text(f'–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?', reply_markup=markup)


async def start(msg: types.Message):
    await msg.bot.set_my_commands([
        types.BotCommand('start', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'),
        types.BotCommand('help', '–ü–æ–º–æ—â—å —Å –±–æ—Ç–æ–º'),
        types.BotCommand('profile', '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å'),
        types.BotCommand('confidentiality', '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ë–æ—Ç–∞')])
    try:
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            table_query = f"""
            SELECT * FROM users;
            """
            with connection.cursor() as cursor:
                cursor.execute(table_query)
                data = []
                for line in cursor.fetchall():
                    data.append(line)
                    if msg.from_user.id in line:
                        markup = types.InlineKeyboardMarkup(row_width=1)
                        button1 = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', callback_data='weather now')
                        button2 = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='weather full_day 0')
                        button3 = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data='weather week')
                        markup.add(button1, button2, button3)
                        await bot.send_message(msg.from_user.id,
                                               f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {line[3]}! üòä\n'f'–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?',
                                               reply_markup=markup)
                        break
                else:
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    button = types.InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='registration')
                    markup.add(button)
                    await bot.send_message(msg.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! üíØüéâ\n'
                                                             f'–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
                    await bot.send_message(msg.from_user.id, f'–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö, '
                                                             f'—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. üìù', reply_markup=markup)
    except Error as e:
        print(e)
        await bot.send_message(msg.from_user.id, '–£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                 '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏c—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')


async def confidentiality(msg: types.Message):
    with open(f'confidentiality.txt', 'r', encoding='utf-8') as f:
        data = f.read()
    await bot.send_message(msg.from_user.id, data)


async def helper(msg: types.Message):
    text = '''
    –ü—Ä–∏–≤–µ—Ç! üëã –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏. 
–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–º–æ–≥–∞—Ç—å —Å –ø–æ–∏—Å–∫–æ–º –µ—â–µ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! üòäü§ñ
    '''
    await bot.send_message(msg.from_user.id, text)


def reg_start(dp: Dispatcher):
    dp.register_message_handler(start, commands='start')
    dp.register_message_handler(helper, commands='help')
    dp.register_message_handler(confidentiality, commands='confidentiality')
    dp.register_callback_query_handler(menu, text='menu')
