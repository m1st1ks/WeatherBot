import requests
from math import ceil
import os

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from mysql.connector import connect, Error

from create import bot
from config import host, user, password, db_name, fias_token, address


class RegistrationFSM(StatesGroup):
    join_name = State()
    join_district = State()
    join_city = State()


def get_fias(text, code):
    data = requests.get(
        f'https://kladr-api.ru/api.php?token={fias_token}&query={text}&contentType=city&typecode={code}'
        f'&withParent=1&limit=50').json()
    data = data.get('result')
    if len(data) == 1:
        return 0
    else:
        return data


async def registration(cb: types.CallbackQuery):
    await cb.answer()
    await RegistrationFSM.join_name.set()
    try:
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            table_query = f"""
            DELETE FROM users WHERE user_id = {cb.from_user.id};
            """
            with connection.cursor() as cursor:
                cursor.execute(table_query)
            connection.commit()
        await cb.message.edit_text('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úçÔ∏è')
    except Error as e:
        print(e)
        await bot.send_message(cb.from_user.id, '–£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')


async def name(msg: types.Message):
    await RegistrationFSM.next()
    text = msg.text
    try:
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            table_query = f"""
            INSERT INTO users VALUES(
            NULL, {msg.from_user.id}, '@{msg.from_user.username}', '{text}', NULL, NULL, NULL, NULL);
            """
            with connection.cursor() as cursor:
                cursor.execute(table_query)
            connection.commit()
        markup = types.InlineKeyboardMarkup(row_width=1)
        button1 = types.InlineKeyboardButton('–ì–æ—Ä–æ–¥ ', callback_data='registration-district city')
        button2 = types.InlineKeyboardButton('–î–µ—Ä–µ–≤–Ω—è ', callback_data='registration-district village')
        button3 = types.InlineKeyboardButton('–ü–æ—Å—ë–ª–æ–∫ ', callback_data='registration-district settlement')
        markup.add(button1, button2, button3)
        await bot.send_message(msg.from_user.id, f'–û—Ç–ª–∏—á–Ω–æ! –í –∫–∞–∫–æ–º —Ç–∏–ø–µ —Ä–∞–π–æ–Ω–∞ —Ç—ã –∂–∏–≤–µ—à—å? üèôÔ∏è\n'
                                                 f'–ï—Å–ª–∏ –Ω–µ—Ç —Ç–≤–æ–µ–≥–æ —Ç–∏–ø–∞, –≤—ã–±–µ—Ä–∏ <b>–ì–æ—Ä–æ–¥</b>',
                               reply_markup=markup)
    except Error as e:
        print(e)
        await bot.send_message(msg.from_user.id, '–£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                 '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')


async def district(cb: types.CallbackQuery):
    await cb.answer()
    await RegistrationFSM.next()
    text = cb.data.split()[1]
    try:
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            table_query = f"""
            UPDATE users SET city_district = '{text}' WHERE user_id = {cb.from_user.id};
            """
            with connection.cursor() as cursor:
                cursor.execute(table_query)
            connection.commit()
        if text == 'city':
            ques = '–∫–∞–∫–æ–º'
            dist = '–≥–æ—Ä–æ–¥–µ'
        elif text == 'village':
            ques = '–∫–∞–∫–æ–π'
            dist = '–¥–µ—Ä–µ–≤–Ω–µ'
        else:
            ques = '–∫–∞–∫–æ–º'
            dist = '–ø–æ—Å—ë–ª–∫–µ'
        await cb.message.edit_text(f'–°—É–ø–µ—Ä! –í {ques} {dist} —Ç—ã –∂–∏–≤–µ—à—å? üåç\n'
                                   f'–ù–∞–ø–∏—à–∏ –≤ <b>–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ</b>\n'
                                   f'–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞')
    except Error as e:
        print(e)
        await bot.send_message(cb.from_user.id, '–£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')


def create_file(data, msg):
    with open(f'cache/{msg.from_user.id}.txt', 'w', encoding='utf-8') as f:
        for i in range(1, len(data)):
            if f"{data[i]['typeShort']}" in address:
                f.write(f"{data[i]['typeShort']}.{data[i]['name']}, "
                        f"{data[i]['parents'][0].get('name')} "
                        f"{data[i]['parents'][0].get('typeShort')}.\n")


def selection_button(page, last_page, msg):
    page, last_page = int(page), int(last_page)
    buttons = []
    array = []
    with open(f'cache/{msg.from_user.id}.txt', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    for i in range(len(lines)):
        line = lines[i][:-1]
        array.append(line)
    if 1 == page == last_page:
        for i in range(len(array)):
            buttons.append([types.InlineKeyboardButton(array[i],
                                                       callback_data=f'registration-selection_city {array.index(array[i])}')])
    elif page == 1 and page != last_page:
        for i in range(0, 10):
            buttons.append([types.InlineKeyboardButton(array[i],
                                                       callback_data=f'registration-selection_city {array.index(array[i])}')])
        buttons.append(
            [types.InlineKeyboardButton(f'‚û°Ô∏è', callback_data=f'registration-choose_page {page + 1} {last_page}')])
    elif 1 < page < last_page:
        for i in range((page - 1) * 10, page * 10):
            buttons.append([types.InlineKeyboardButton(array[i],
                                                       callback_data=f'registration-selection_city {array.index(array[i])}')])
        buttons.append(
            [types.InlineKeyboardButton(f'‚¨ÖÔ∏èÔ∏è', callback_data=f'registration-choose_page {page - 1} {last_page}'),
             types.InlineKeyboardButton(f'‚û°Ô∏è', callback_data=f'registration-choose_page {page + 1} {last_page}')])
    else:
        for i in range((page - 1) * 10, len(array)):
            buttons.append([types.InlineKeyboardButton(array[i],
                                                       callback_data=f'registration-selection_city {array.index(array[i])}')])
        buttons.append(
            [types.InlineKeyboardButton(f'‚¨ÖÔ∏èÔ∏è', callback_data=f'registration-choose_page {page - 1} {last_page}')])
    return buttons


async def choose_page(cb: types.CallbackQuery):
    await cb.answer()
    page, last_page = cb.data.split()[1], cb.data.split()[2]
    buttons = selection_button(page, last_page, cb)
    markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await cb.message.edit_text(f'–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–π–æ–Ω –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:\n'
                               f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{last_page}', reply_markup=markup)


async def city(msg: types.Message, state: FSMContext):
    await state.finish()
    text = msg.text
    try:
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            select_table_query = f"""
            SELECT city_district FROM users WHERE user_id = {msg.from_user.id};
            """
            with connection.cursor() as cursor:
                cursor.execute(select_table_query)
                dist = cursor.fetchone()[0]
            connection.commit()
        if dist == 'city':
            code = 1
        elif dist == 'village':
            code = 4
        else:
            code = 2
        data = get_fias(text, code)
        if data == 0:
            await RegistrationFSM.join_city.set()
            await bot.send_message(msg.from_user.id, f'–¢–∞–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –Ω–µ—Ç –≤ –†–æ—Å—Å–∏–∏! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üåç\n'
                                                     f'–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ <b>–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ</b>\n'
                                                     f'–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞')
        else:
            create_file(data, msg)
            with open(f'cache/{msg.from_user.id}.txt', 'r', encoding='utf-8') as f:
                lines = f.readlines()
            buttons = selection_button(1, ceil(len(lines) / 10), msg)
            markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(msg.from_user.id, f'–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–π–æ–Ω –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:\n'
                                                     f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{ceil(len(lines) / 10)}', reply_markup=markup)
    except Error as e:
        print(e)
        await bot.send_message(msg.from_user.id, '–£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                 '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')


async def selection_city(cb: types.CallbackQuery):
    await cb.answer()
    array = []
    with open(f'cache/{cb.from_user.id}.txt', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    for i in range(len(lines)):
        line = lines[i][:-1]
        array.append(line)
    text = array[int(cb.data.split()[1])]
    text = text.split()
    sel_city, area, area_district = text[0], text[1], text[2][:-1]
    sel_city = sel_city.split('.')[1][:-1]
    try:
        os.remove(f'cache/{cb.from_user.id}.txt')
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            update_table_query = f"""
                                        UPDATE users SET city = '{sel_city}', area_district = '{area_district}', 
                                        area = '{area}' WHERE user_id = {cb.from_user.id};
                                        """
            with connection.cursor() as cursor:
                cursor.execute(update_table_query)
            connection.commit()
        markup = types.InlineKeyboardMarkup(row_width=1)
        button1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–≥–æ–¥–µ', callback_data='menu')
        markup.add(button1)
        await cb.message.edit_text('–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑–¥–µ–ª –ø–æ–≥–æ–¥—ãüå§Ô∏è‚òÄÔ∏è\n'
                                   '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å - /profile', reply_markup=markup)
    except Error as e:
        print(e)
        await bot.send_message(cb.from_user.id, '–£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')


def reg_registration(dp: Dispatcher):
    dp.register_callback_query_handler(registration, text='registration')
    dp.register_message_handler(name, state=RegistrationFSM.join_name)
    dp.register_callback_query_handler(district, Text(startswith='registration-district'),
                                       state=RegistrationFSM.join_district)
    dp.register_message_handler(city, state=RegistrationFSM.join_city)
    dp.register_callback_query_handler(selection_city, Text(startswith='registration-selection_city'))
    dp.register_callback_query_handler(choose_page, Text(startswith='registration-choose_page'))
